import os
import shutil
try:
    import openpyxl
except:
    os.system("pip install openpyxl")
    import openpyxl
from openpyxl.worksheet import worksheet
import config
from utls import getCellValue

class Header:
    index = 0
    name = ""
    typeStr = ""
    note=""
    isFilter = False
    def __init__(self, worksheet:worksheet.Worksheet, index) -> None:
        self.index = index
        self.name = getCellValue(worksheet, 1, index)
        self.typeStr = getCellValue(worksheet, 2, index)
        self.note = getCellValue(worksheet, 3, index)
        self.isFilter = self.name == '' or self.name[0] == '#' or self.name[0].isdigit()
        pass

def getHeader(worksheet:worksheet.Worksheet):
    heads = []
    id = 0
    for i in range(1,worksheet.max_column + 1):
        head = Header(worksheet, i)
        if head.isFilter:
            continue
        heads.append(head)
        if "id" == head.name:
            id = i
    return heads, id

def generate(path, numbericType):
    header:Header
    workbook = openpyxl.load_workbook(path, data_only=True)
    isReplaceNumbericType = True
    if "NumbericConfig" in path:
        isReplaceNumbericType = False
    for name in workbook.sheetnames:

        if not name.isalpha():
            continue

        worksheet = workbook[name]
        headers, idIndex = getHeader(worksheet)
        if idIndex == 0:
            continue

        generateSharp(name, headers)

        tableLines = []
        idList = []


        for i in range(4, worksheet.max_row + 1):
            tableLine = []
            idCell = worksheet.cell(row = i, column = idIndex).value
            
            if idCell == None:
                continue

            if idCell in idList:
                print(str(idCell) +" duplication")
            
            idList.append(str(idCell))

            for header in headers:
                value = getCellValue(worksheet, i, header.index)
                if isReplaceNumbericType:
                    if value in numbericType:
                        value = str(numbericType[value])
                tableLine.append(value)

            if len(tableLine) > 0:
                if len(''.join(tableLine).strip()) > 0:
                    tableLines.append('\t'.join(tableLine))
        
        if len(tableLines) > 0:
            savePath = os.path.join(config.csvOutput, name + ".csv")

            if not os.path.exists(config.csvOutput):
                os.makedirs(config.csvOutput)
            # save csv
            with open(savePath, "w+", encoding = 'utf-8') as f:
                names = []
                for header in headers:
                    names.append(header.name)
                f.write('\t'.join(names)+'\n')
                f.write('\n'.join(tableLines))

            print('generate: ' + savePath)

def generateSharp(tableName, headers):
    scriptLines=[]
    header:Header

    scriptLines.append('// The configuration generation file cannot be modified!\n')
    scriptLines.append('public partial class {} : IConfig'.format(tableName))
    scriptLines.append('{')

    for header in headers:
        if header.isFilter:
            continue
        if header.note != "":
            header.note = " // " + header.note
        scriptLines.append("\tpublic {} {};{}".format(header.typeStr, header.name.strip(), header.note))
    scriptLines.append('}\n')

    scriptLines.append('[Config(typeof({0}))]'.format(tableName))
    scriptLines.append('public partial class {0}Loader : BaseLoader\n{{\n\n}}\n'.format(tableName))

    savePath = os.path.join(config.scriptOutput, tableName + ".cs")
    dirName = os.path.dirname(savePath)
    if not os.path.exists(dirName):
        os.makedirs(dirName)
    
    # save script
    with open(savePath, "w+", encoding = 'utf-8') as f:
        f.write('\n'.join(scriptLines))
    print('generate: ' + savePath)

def readNumbericType():
    result={}
    if not os.path.exists("xlsxs/NumbericConfig.xlsx"):
        return result
    workbook = openpyxl.load_workbook('xlsxs/NumbericConfig.xlsx', data_only=True)
    name = workbook.sheetnames[0]
    worksheet = workbook[name]
    for row in range(4, worksheet.max_row+1):
        key = worksheet.cell(row = row, column = 2).value
        if key != None and key != '':
            value = worksheet.cell(row = row, column = 3).value
            result[key] = value
   
    with open(config.numbericTypeOutput, mode='w+', encoding='utf-8') as f:
        f.write('//This file is automatically generated and cannot be modified!\n')
        f.write('public static class NumericType\n')
        f.write('{\n')
        f.write('\tpublic const int Max = 10000;\n\n')
        for k in result:
            f.write('\tpublic const int {0} = {1};\n'.format(k,result[k]))
            f.write('\tpublic const int {0}Base = {0} * 10 + 1;\n'.format(k))
            f.write('\tpublic const int {0}Add = {0} * 10 + 2;\n'.format(k))
            f.write('\tpublic const int {0}Pct = {0} * 10 + 3;\n'.format(k))
            f.write('\tpublic const int {0}FinalAdd = {0} * 10 + 4;\n'.format(k))
            f.write('\tpublic const int {0}FinalPct = {0} * 10 + 5;\n\n'.format(k))
        f.write('}\n')

    return result

if __name__ == "__main__":
    print("csvPath:" + config.csvOutput)
    print("scriptPath:" + config.scriptOutput)

    numbericType = readNumbericType()
    
    for dir, _ ,files in os.walk("xlsxs"):
        for file in files:
            if file.endswith("xlsx"):
                path = os.path.join(dir,file)
                generate(path, numbericType)
